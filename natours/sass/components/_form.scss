.form {
  &__group:not(:last-child) {
    margin-bottom: 2rem;
  }

  &__input {
    font-size: 1.5rem;
    font-family: inherit;  // input forms dont inherit font properties, hence need to declare font-family and color specifically
    color: inherit;
    padding: 1.5rem 2rem;
    border-radius: 2px;
    background-color: rgba($color-white, .5);
    border: none;
    border-bottom: 3px solid transparent;  // when the input is focused, the border is created, due to which elements below are pushed down 3px, so we add an invisible border to initial state of the form to nullfily that.
    width: 90%;
    display: block;
    transition: all .3s;  // to animate the color change

    &:focus {
      outline: none;
      box-shadow: 0 1rem 2rem rgba($color-black, 0.1);
      border-bottom: 3px solid $color-primary;

      &:invalid {
        border-bottom: 3px solid $color-secondary-dark;
      }

    }

    &::-webkit-input-placeholder {
      color: $color-grey-dark-2;
    }

  }

  &__label {
    font-size: 1.2rem;
    font-weight: 700;
    margin-left: 2rem;
    margin-top: .7rem;
    display: block;
    transition: all 0.3s;
  }

  &__input:placeholder-shown + &__label {  // '+' is the adjacent sibling selector that comes after the first element, would not work if element order in html is reversed reversed.
    opacity: 0;
    visibility: hidden; // visiblility cannot be animated
    transform: translateY(-4rem);
  }

  &__radio-group {
    width: 49%;
    display: inline-block;
  }

  &__radio-input {
    display: none;
  }

  &__radio-label {
    font-size: $default-font-size;
    cursor: pointer;
    position: relative;
    padding-left: 4.5rem;

  }

  &__radio-button {
    height: 3rem;
    width: 3rem;
    border: 5px solid $color-primary;
    border-radius: 50%;
    display: inline-block;
    position: absolute;
    left: 0;
    top: -.4rem;

    &::after {  // this is to have two separate elements for radio button, one outer circle, and one inner circle which is shown when the radio button is clicked
      content: ''; // must be specified  everytime a pseudoelement is used
      display: block;  // must be specified  everytime a pseudoelement is used
      height: 1.3rem; 
      width: 1.3rem;
      border-radius: 50%;
      position: absolute;  // for absolute positioning, the parent can have position absolute or relative, what is required is that position property is defined.
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background-color: $color-primary;
      opacity: 0;
      transition: opacity .2s;
    }
  }

  &__radio-input:checked ~ &__radio-label &__radio-button::after {
    opacity: 1;
  }
}